{"version":3,"sources":["source/navigation/book.js","source/bus/forecast/components/filter/index.js","source/bus/forecast/components/filter/useFiltersStates.js","source/bus/forecast/components/head/index.js","source/bus/forecast/components/head/useHead.js","source/bus/forecast/elements/dayForecast/index.js","source/bus/forecast/components/weather/index.js","source/api/index.js","source/api/config.js","source/bus/forecast/types.js","source/bus/forecast/actions.js","source/bus/forecast/hooks/useForecast.js","source/bus/forecast/hooks/useForecastFetch.js","source/bus/forecast/index.js","source/bus/forecast/hooks/useFilter.js","source/index.js","source/navigation/index.js","source/navigation/history.js","source/bus/forecast/reducer.js","source/init/rootReducer.js","source/init/middleware.js","source/init/store.js","app.js","serviceWorker.js","index.js"],"names":["book","Object","freeze","root","Filter","setFilter","setActive","useState","filterValue","setFilterValue","checkedValue","setCheckedValue","minValue","setMinValue","maxValue","setMaxValue","useEffect","_clearFilter","_setCheckedValue","value","_onclickSetFilter","filter","check","min","max","_setTemperatureValue","e","target","targetValue","id","useFiltersStates","className","trim","onClick","htmlFor","type","onChange","disabled","Head","s","data","isFetching","currentHeadValue","currentActive","length","find","index","useHead","day","temperature","rain_probability","humidity","date","Date","headJSX","format","locale","ru","charAt","toUpperCase","slice","DayForecast","Weather","listJSX","map","weather","String","api","forecast","fetch","method","types","FORECAST_START_FETCHING","FORECAST_STOP_FETCHING","FORECAST_FILL","FORECAST_SET_FETCHING_ERROR","FORECAST_FETCH_ASYNC","forecastActions","startFetching","stopFetching","fill","payload","setFetchingError","error","fetchAsync","dispatch","a","response","status","json","useForecast","valueFilter","useDispatch","useSelector","state","useForecastFetch","forecastFilter","count","Forecast","useFilter","spinnerJSX","emptyDataJSX","weatherJSX","Source","Routes","exact","path","history","createBrowserHistory","initialState","rootReducer","combineReducers","composeEnhancers","createLogger","duration","collapsed","colors","title","action","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ef4f0fb.chunk.js","sourcesContent":["// Root not '/' Because used gh-pages\nexport const book = Object.freeze({\n  root: '/React-Redux-Project-1',\n});\n","import React from 'react';\nimport { useFiltersStates } from './useFiltersStates';\n\nexport const Filter = ({ setFilter, setActive }) => {\n  const { filterValue, checkedValue, _setCheckedValue, minValue, maxValue, _onclickSetFilter, _setTemperatureValue } = useFiltersStates(setFilter, setActive);\n\n  return (\n    <div className=\"filter\">\n      <span className={`checkbox ${checkedValue === 0 ? 'selected' : ''} ${filterValue ? 'blocked' : ''}`.trim()} onClick={() => _setCheckedValue(0)}>Облачно</span>\n      <span className={`checkbox ${checkedValue === 1 ? 'selected' : ''} ${filterValue ? 'blocked' : ''}`.trim()} onClick={() => _setCheckedValue(1)}>Солнечно</span>\n      <p className=\"custom-input\">\n        <label htmlFor=\"min-temperature\">Минимальная температура</label>\n        <input id=\"min-temperature\" type=\"number\" min=\"-100\" max=\"100\" onChange={_setTemperatureValue} value={minValue} disabled={filterValue ? 'blocked' : ''}/>\n      </p>\n      <p className=\"custom-input\">\n        <label htmlFor=\"max-temperature\">Максимальная температура</label>\n        <input id=\"max-temperature\" type=\"number\" min=\"-100\" max=\"100\" onChange={_setTemperatureValue} value={maxValue} disabled={filterValue ? 'blocked' : ''}/>\n      </p>\n      <button onClick={_onclickSetFilter} disabled={checkedValue === -1 && !minValue && !maxValue ? true : false}>{!filterValue ? 'Отфильтровать' : 'Очистить'}</button>\n    </div>\n  );\n};","import { useState, useEffect } from 'react';\n\nexport const useFiltersStates = (setFilter, setActive) => {\n  const [filterValue, setFilterValue] = useState(null);\n  const [checkedValue, setCheckedValue] = useState(-1);\n  const [minValue, setMinValue] = useState('');\n  const [maxValue, setMaxValue] = useState('');\n\n  useEffect(() => {\n    setFilter(filterValue);\n  });\n\n  const _setCheckedValue = (value) => {\n    if (!filterValue) { setCheckedValue(value) }\n  }\n\n  const _setTemperatureValue = (e) => {\n    let target = e.target;\n\n    if (!target) return;\n\n    const targetValue = e.target.value;\n    \n    if (target.id === 'min-temperature') {\n      if (targetValue >= -100 && targetValue <= 100 && targetValue) {\n        setMinValue(e.target.value);\n      }\n    }\n    if (target.id === 'max-temperature') {\n      if (targetValue >= -100 && targetValue <= 100 && targetValue) {\n        setMaxValue(e.target.value)\n      }\n    }\n  };\n\n  const _onclickSetFilter = () => {\n    if (filterValue) {\n      _clearFilter();\n      return;\n    }\n\n    let filter = {};\n\n    if (checkedValue === 0) {\n      filter.check = 'cloudy';\n    } else if (checkedValue === 1) {\n      filter.check = 'sunny';\n    }\n\n    if (minValue) {\n      filter.min = minValue;\n    }\n\n    if (maxValue) {\n      filter.max = maxValue;\n    }\n\n    setFilterValue(filter);\n  };\n\n  const _clearFilter = () => {\n    setFilterValue(null);\n    setCheckedValue(-1);\n    setMinValue('');\n    setMaxValue('');\n    setActive(0);\n  };\n\n  return {filterValue, checkedValue, _setCheckedValue, minValue, maxValue, _onclickSetFilter, _setTemperatureValue};\n};","import React from 'react';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport { useHead } from './useHead';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n};\n\nexport const Head = ({ data, isFetching, currentActive }) => {\n  const { currentHeadValue } = useHead({ data, isFetching, currentActive });\n  const { day, type, temperature, rain_probability, humidity } = currentHeadValue;\n\n  const date = new Date(day);\n\n  const headJSX = !isFetching && data && data.length && (\n    <>\n      <div className=\"head\" key={day}>\n        <div className={`icon ${type}`}></div>\n        <div className=\"current-date\">\n          <p>{capitalize(format(date, 'eeee', { locale: ru }))}</p>\n            <span>{format(date, 'd MMMM', { locale: ru })}</span>\n        </div>\n      </div>\n      <div className=\"current-weather\">\n        <p className=\"temperature\">{temperature}</p>\n        <p className=\"meta\">\n          <span className=\"rainy\">{rain_probability}%</span>\n          <span className=\"humidity\">{humidity}%</span>\n        </p>\n      </div>\n    </>\n  );\n  \n  return (\n    <>\n      {headJSX}\n    </>\n  );\n};","export const useHead = ({ data, isFetching, currentActive}) => {\n  const currentHeadValue = !isFetching && data && data.length && data.find((value, index) => index === currentActive);\n\n  return { currentHeadValue };\n};","import React from 'react';\nimport { format } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n};\n\nexport const DayForecast = ({ data, index, currentActive, setActive }) => {\n  const { day, type, temperature } = data;\n\n  let date = format(new Date(day), 'cccc', { locale: ru });\n\n  return (\n    <div className={`day ${type} ${index === currentActive ? 'selected' : ''}`} onClick={() => setActive(index)}>\n      <p>{capitalize(date)}</p>\n      <span>{temperature}</span>\n    </div>\n  );\n};","import React from 'react';\n\nimport { DayForecast } from '../../elements/dayForecast';\n\nexport const Weather = ({ data, isFetching, currentActive, setActive }) => {\n\n  const listJSX = !isFetching && data && data.length && data.map((weather, index) => {\n    return <DayForecast key={String(weather.day)} data={weather} index={index} currentActive={currentActive} setActive={setActive} />\n  });\n\n  return (\n    <>\n      <div className=\"forecast\">\n        {listJSX}\n      </div>\n    </>\n  );\n};\n","import {root} from './config';\n\nexport const api = Object.freeze({\n  forecast: {\n    fetch: () => {\n      return fetch(`${root}/forecast`, {method: \"GET\"})\n    }\n  }\n});","export const root = 'https://lab.lectrum.io/rtx/api';","export const types = Object.freeze({\n  FORECAST_START_FETCHING: 'FORECAST_START_FETCHING',\n  FORECAST_STOP_FETCHING: 'FORECAST_STOP_FETCHING',\n  FORECAST_FILL: 'FORECAST_FILL',\n  FORECAST_SET_FETCHING_ERROR: 'FORECAST_SET_FETCHING_ERROR',\n  FORECAST_FETCH_ASYNC: 'FORECAST_FETCH_ASYNC',\n});","import {api} from '../../api';\nimport {types} from './types';\n\nexport const forecastActions = Object.freeze({\n  startFetching: () => {\n    return { type: types.FORECAST_START_FETCHING }\n  },\n  stopFetching: () => {\n    return { type: types.FORECAST_STOP_FETCHING }\n  },\n  fill: (payload) => {\n    return { type: types.FORECAST_FILL, payload }\n  },\n  setFetchingError: (error) => {\n    return {\n      type: types.FORECAST_SET_FETCHING_ERROR,\n      error: true,\n      payload: error\n    }\n  },\n\n  fetchAsync: () => async (dispatch) => {\n    dispatch(forecastActions.startFetching());\n\n    const response = await api.forecast.fetch();\n\n    if (response.status === 200) {\n      const { data } = await response.json();\n\n      dispatch(forecastActions.fill(data));\n    } else {\n      const error = {\n        status: response.status\n      };\n\n      dispatch(forecastActions.setFetchingError(error));\n    }\n    dispatch(forecastActions.stopFetching());\n  }\n});","import { useForecastFetch } from './useForecastFetch';\n\nexport const useForecast = (valueFilter) => {\n  const { isFetching, data, error } = useForecastFetch();\n  \n  \n  if (!valueFilter) {\n    const forecastList = !isFetching && data && data.length && data.filter((weather, index) => index < 7);\n\n    return { isFetching, data: forecastList, error };\n  } else if (!!valueFilter && !isFetching) {\n    const { check, min, max } = valueFilter;\n    \n    const forecastFilter = data.filter(weather => {\n      return weather.type === check;\n    });\n\n    let count = 0;\n\n    if (min && max) {\n      if (check) {\n        const forecastMinMaxFilter = forecastFilter.filter(weather => {\n          return weather.temperature >= min && weather.temperature <= max && count++ < 7;\n        });\n\n        return { isFetching, data: forecastMinMaxFilter, error };\n      } else {\n        const forecastMinMaxFilter = data.filter(weather => {\n          return weather.temperature >= min && weather.temperature <= max && count++ < 7;\n        });\n\n        return { isFetching, data: forecastMinMaxFilter, error };\n      }\n    }\n\n    if (min) {\n      if (check) {\n        const forecastMinFilter = forecastFilter.filter(weather => {\n          return weather.temperature >= min && count++ < 7;\n        });\n\n        return { isFetching, data: forecastMinFilter, error };\n      } else {\n        const forecastMinFilter = data.filter(weather => {\n          return weather.temperature >= min && count++ < 7;\n        });\n\n        return { isFetching, data: forecastMinFilter, error };\n      }\n    }\n    \n    if (max) {\n      if (check) {\n        const forecastMaxFilter = forecastFilter.filter(weather => {\n          return weather.temperature <= max && count++ < 7;\n        });\n\n        return { isFetching, data: forecastMaxFilter, error };\n      } else {\n        const forecastMaxFilter = data.filter(weather => {\n          return weather.temperature <= max && count++ < 7;\n        });\n\n        return { isFetching, data: forecastMaxFilter, error };\n      }\n    }\n\n    const forecastTypeFilter = !isFetching && forecastFilter && forecastFilter.length && forecastFilter.filter((weather, index) => {\n      return index < 7;\n    });\n\n    return { isFetching, data: forecastTypeFilter, error };\n  }\n\n  return { isFetching, data, error };\n};","// React\nimport {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {forecastActions} from '../actions';\n\nexport const useForecastFetch = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(forecastActions.fetchAsync());\n  }, [dispatch]);\n\n  const { data, isFetching, error } = useSelector((state) => state.forecast);\n\n  return { data, isFetching, error }\n};","import React, { useState } from 'react';\nimport { Filter } from './components/filter';\nimport { Head } from './components/head';\nimport { Weather } from './components/weather';\nimport { useForecast } from './hooks/useForecast';\nimport { useFilter } from './hooks/useFilter';\n\nexport const Forecast = () => {\n  const [currentActive, setActive] = useState(0);\n  const { valueFilter, setFilter } = useFilter();\n  const { isFetching, data, error } = useForecast(valueFilter);\n  \n\n  if (error && error.status === 404) {\n    return <p className=\"message\">Страница не найдена</p>;\n  }\n\n  if (error && error.status !== 404) {\n    return <p className=\"message\">Что-то пошло не так</p>;\n  }\n\n  const spinnerJSX = isFetching && (\n    <div className=\"pswp__preloader__icn\">\n      <div className=\"pswp__preloader__cut\">\n        <div className=\"pswp__preloader__donut\"></div>\n      </div>\n    </div>\n  );\n\n  const emptyDataJSX = !isFetching && data && data.length === 0 && (\n    <p className=\"message\">По данному запросу нет данных</p>\n  );\n\n\n  const weatherJSX = !isFetching && data && data.length && (\n    <>\n      <Head data={data} isFetching={isFetching} currentActive={currentActive} />\n      <Weather data={data} isFetching={isFetching} currentActive={currentActive} setActive={setActive} />\n    </>\n  );\n\n  return (\n    <>\n      {spinnerJSX}\n      <Filter setFilter={setFilter} setActive={setActive}/>\n      {weatherJSX ? weatherJSX : emptyDataJSX}\n    </>\n  );\n};","import { useState } from 'react';\n\nexport const useFilter = () => {\n  const [valueFilter, setFilter] = useState(null);\n\n  return {\n    valueFilter,\n    setFilter,\n  }\n};","import './styles/index.scss';\n\nimport React from 'react';\nimport { Forecast } from './bus/forecast';\n\nexport const Source = () => {\n  return (\n    <>\n      <main>\n        <Forecast/>\n      </main>\n    </>\n  );\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { book } from './book';\n\nimport { Source } from '../index';\n\nexport const Routes = () => (\n  <>\n    <Switch>\n      <Route exact path={book.root}>\n        <Source />\n      </Route>\n    </Switch>\n  </>\n);","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","// Types\nimport {types} from './types';\n\nconst initialState = {\n    data: null,\n    isFetching: false,\n    error: null,\n};\n\nexport const forecastReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case types.FORECAST_START_FETCHING:\n      return {\n        ...state,\n        isFetching: true\n      };\n    case types.FORECAST_STOP_FETCHING:\n      return {\n        ...state,\n        isFetching: false\n      };\n    case types.FORECAST_SET_FETCHING_ERROR:\n      return {\n        ...state,\n        error: payload,\n        data: null,\n      };\n    case types.FORECAST_FILL:\n      return {\n        ...state,\n        data: payload,\n        error: null,\n      };\n\n    default:\n      return state\n  }\n};","import {combineReducers} from 'redux';\n\nimport {forecastReducer as forecast} from '../bus/forecast/reducer';\n\nexport const rootReducer = combineReducers({\n  forecast\n});","// Core\nimport { compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nexport const logger = createLogger({\n    duration: true,\n    collapsed: true,\n    colors: {\n        title: (action) => {\n            return action.error ? 'firebrick' : 'deepskyblue';\n        },\n        prevState: () => '#1C5FAF',\n        action:    () => '#149945',\n        nextState: () => '#A47104',\n        error:     () => '#ff0005',\n    }\n});\n\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = developmentEnvironment && devtools ? devtools : compose;\n\nconst middleware = [thunk];\n\nif (developmentEnvironment) {\n    middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };","import {createStore, applyMiddleware} from 'redux';\n\nimport {rootReducer} from './rootReducer';\nimport {composeEnhancers, middleware} from './middleware';\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));","import React from 'react';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { Routes } from './source/navigation';\n\nimport { history } from './source/navigation/history';\nimport { store } from './source/init/store';\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <Router history={history}>\n        <Routes/>\n      </Router>\n    </Provider>\n  )\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './app';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}